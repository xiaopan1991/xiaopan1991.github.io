<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xiaopan Blog</title>
    <description>关于程序员 | 肖攀 &amp; Mobile Lover，Software Engineer | 这里是 @xiaopan肖攀 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 05 Mar 2018 12:08:41 +0800</pubDate>
    <lastBuildDate>Mon, 05 Mar 2018 12:08:41 +0800</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Unity游戏开发---TimeLine</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;敬请期待…&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/26/UnitySummary0206/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/26/UnitySummary0206/</guid>
        
        <category>实用技能</category>
        
        
      </item>
    
      <item>
        <title>Unity游戏开发摘录</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;帧同步&quot;&gt;帧同步:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;帧同步常被RTS(即时战略)游戏常采用。在游戏中同步的是玩家的操作指令，操作指令包含当前的帧索引。一般的流程是客户端上传操作到服务器， 服务器收到后并不计算游戏行为， 而是转发到所有客户端。这里最重要的概念就是 相同的输入 + 相同的时机 = 相同的输出&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实现帧同步的流程一般是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.同步随机数种子。(一般游戏中都设计随机数的使用， 通过同步随机数种子，可以保持随机数一致性)&lt;br /&gt;
2.客户端上传操作指令。(指令包括游戏操作和当前帧索引)&lt;br /&gt;
3.服务器广播所有客户端的操作。(如果没有操作， 也要广播空指令来驱动游戏帧前进)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为帧同步的特性， 我们可以很方便的做出战斗回放：服务器记录所有操作， 客户端请求到操作文件再执行一次即可。&lt;/p&gt;

&lt;p&gt;帧同步的特性导致客户端的逻辑实现和表现实现必须完全分离。Unity中的一些方法接口(如 Invoke， Update、动画系统等)是不可靠的，所有要自己实现一套物理引擎、数学库，做到逻辑和表现分离。 这样即使Unity的渲染是不同步的，但是逻辑跑出来是同步的。&lt;/p&gt;

&lt;h2 id=&quot;状态同步&quot;&gt;状态同步:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;同步的是游戏中的各种状态。一般的流程是客户端上传操作到服务器，服务器收到后计算游戏行为的结果，然后以广播的方式下发游戏中各种状态，客户端收到状态后再根据状态显示内容。状态同步最广泛的应用应该是在回合制游戏中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;状态同步其实是一种不严谨的同步。它的思想中，不同玩家屏幕上的表现的一致性并不是重要指标， 只要每次操作的结果相同即可。所以状态同步对网络延迟的要求并不高。像玩RPG游戏，200-300ms的延迟也可以接受。 但是在RTS游戏中，50ms的延迟也会很受伤。 
举个移动的例子，在状态同步中， 客户端甲上操作要求从A点移动到B点，但在客户端乙上， 甲对象从A移动到C，然后从C点移动到了B。这是因为， 客户端乙收到A的移动状态时， 已经经过了一个延迟。这个过程中，需要客户端乙本地做一些平滑的处理，最终达到移动到B点的结果。&lt;/p&gt;

&lt;p&gt;所以国产RPG游戏中，动画的特效一般做的比较绚丽(大)， 攻击的时候给人感觉是击中了。放技能之前一般也有一个动画前摇，同时将攻击请求提交给服务器。等服务器结果返回时，动画也播放完毕了，之后就是统一的伤害效果和结算&lt;/p&gt;

&lt;p&gt;Ref:&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/qiaoquan3/article/details/75635466&quot;&gt;引用1&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/26/UnityArticle0206/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/26/UnityArticle0206/</guid>
        
        <category>摘录</category>
        
        
      </item>
    
      <item>
        <title>2018新目标</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;新的一年开始了，今天算是自己开年的第一个工作日吧，年前就已经架好的Blog也该好好的利用起来了…&lt;/p&gt;

&lt;h2 id=&quot;2018年目标&quot;&gt;2018年目标&lt;/h2&gt;
&lt;p&gt;生活目标:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;结束5年的北漂生活(走前去一次香山)&lt;/li&gt;
    &lt;li&gt;装修房子，布置自己的小家，开始真正意义上的生活&lt;/li&gt;
    &lt;li&gt;带老婆多出去走走&lt;/li&gt;
    &lt;li&gt;熟悉这个陌生的城市—-杭州&lt;/li&gt;
    &lt;li&gt;找一份满意的工作&lt;/li&gt;
    &lt;li&gt;颈椎康复训练&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;工作学习目标:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;学习更多的Unity开发技能&lt;/li&gt;
    &lt;li&gt;积累更多游戏开发工具的制作经验&lt;/li&gt;
    &lt;li&gt;掌握更多的游戏框架，阅读更多的游戏源码&lt;/li&gt;
    &lt;li&gt;对虚幻引擎进一步的学习，掌握引擎使用流程并能上手简单游戏&lt;/li&gt;
    &lt;li&gt;与时俱进，学习python&lt;/li&gt;
    &lt;li&gt;利用闲暇时间独立开发小游戏&lt;/li&gt;
    &lt;li&gt;写博客，与大家分享更多游戏开发中的坑与经验&lt;/li&gt;
    &lt;li&gt;结交更多圈内的朋友&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;2018年是陌生的一年，2018年是目标明确的一年，让我们背上行囊，一起踏上征程，让2018更精彩…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaopan1991.github.io/img/fight.jpg&quot; alt=&quot;我的头像&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/24/NewYearNewTarget/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/24/NewYearNewTarget/</guid>
        
        <category>旅程</category>
        
        
      </item>
    
      <item>
        <title>Hello 2018</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“// TODO IT. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#record#&lt;/p&gt;

&lt;p&gt;Xiao Pan的Blog之地。&lt;br /&gt;
2018年，从此开始了书写博客之旅。
分享一些生活感悟、技术经验…&lt;br /&gt;
敬请期待&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/29/hello-2018/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/29/hello-2018/</guid>
        
        <category>杂</category>
        
        
      </item>
    
  </channel>
</rss>
