<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xiaopan Blog</title>
    <description>关于程序员 | 肖攀 &amp; Mobile Lover，Software Engineer | 这里是 @xiaopan肖攀 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 27 Mar 2018 12:49:47 +0800</pubDate>
    <lastBuildDate>Tue, 27 Mar 2018 12:49:47 +0800</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Unity游戏开发---聊聊在Unity编程中对foreach的偏见</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近一直在忙着面试，很多面试题都非常基础（大多都可以在网上找到原题）&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/27/UnityForeach/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/27/UnityForeach/</guid>
        
        <category>实用技能</category>
        
        
      </item>
    
      <item>
        <title>OpenGL Programming Guide 001</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;-talk-is-cheap-show-me-the-code---屁话少说放码过来&quot;&gt;“ Talk is cheap， Show me the code.   屁话少说，放码过来”&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;距离上次发文章差不多快一个月的时间了，这一个月中间经历了离职、搬家、离开北京、来杭州安顿、开始装修房子、找工作等等一些事情，有顺心的也有不太顺利的。是时候该静下心来写写东西了。由于这段时间找工作频频会在图形学方面的知识上遭到鄙视，所以打算开始学习一下这方面的知识，就买本书开始学起来了。上初中高中的时候老师就教育我们，好记性不如烂笔头，看书还是得做做笔记，一方面是为了对学过的东西的总结，另一方面也算是为了以后回顾知识作参考，如果可以的话也希望能帮助到一些和我一样在这方面遭到鄙视的小伙伴，废话不多说，开始正题.&lt;/p&gt;

&lt;p&gt;我用的是页面最上方的背景图所示的这本书（《OpenGL 编程指南 第9版》），今天刚拿到书主要看了一下第1章：OpenGL概述。&lt;/p&gt;

&lt;p&gt;在书的前言里面介绍了本书代码用到的第三方支持库：&lt;a href=&quot;http://www.glfw.org//&quot;&gt;++GLFW++&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/skaslev/gl3w/&quot;&gt;++GL3W++&lt;/a&gt;，以及&lt;a href=&quot;https://github.com/openglredbook/examples/&quot;&gt;++本书的源代码++&lt;/a&gt;, 还有一个重要的工具&lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt;（它是用来把GLFW源码库编译成动态库或静态库的），还有就是电脑上要有python环境 。我费了好大的劲，花了差不多小半天的时间才把环境搭起来，也许是我比较愚钝把。&lt;/p&gt;

&lt;h2 id=&quot;环境搭建的流程和注意事项&quot;&gt;环境搭建的流程和注意事项&lt;/h2&gt;

&lt;h3 id=&quot;1先将上方介绍的两个第三方库工具和源码下载到本地&quot;&gt;1.先将上方介绍的两个第三方库、工具和源码下载到本地&lt;/h3&gt;
&lt;h3 id=&quot;2对下载好的工具进行处理&quot;&gt;2.对下载好的工具进行处理&lt;/h3&gt;
&lt;h4 id=&quot;glfw&quot;&gt;GLFW：&lt;/h4&gt;
&lt;p&gt;我没有从git上克隆，直接从网站上下载的压缩包：&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_1.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  接下来就是CMake的上场了&lt;/p&gt;

&lt;h4 id=&quot;cmake&quot;&gt;CMake：&lt;/h4&gt;
&lt;p&gt;官网 -&amp;gt; Download选项（在页面中找到Binary distributions，从下面找到你电脑对应的版本） -&amp;gt; 下载&lt;br /&gt;
  如图所示&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;生成glfw静态库&quot;&gt;生成GLFW静态库&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_3.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  经过上图操作后，在D:\glfw-3.2.1\build\src\Debug（这是我的目录）下就会存在一个glfw3.lib的静态链接库。&lt;/p&gt;

&lt;h4 id=&quot;编译gl3w&quot;&gt;编译GL3W&lt;/h4&gt;
&lt;p&gt;打开下载好的GL3W文件夹，双击文件中的gl3w_gen.py脚本（前提是你的电脑上有python环境）。脚本执行成功之后在src文件夹下会多一个gl3w.c的C文件，还会多一个include的文件夹（include/GL/..），里面有两个.h头文件。&lt;/p&gt;

&lt;h4 id=&quot;本书的源代码&quot;&gt;本书的源代码&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK，所有的菜都准备好了，可以开始下锅炒了。&lt;/p&gt;

&lt;h3 id=&quot;3新建工程&quot;&gt;3.新建工程&lt;/h3&gt;
&lt;p&gt;&amp;lt;1&amp;gt; 新建文件夹Libraries\Includes和Libraries\Libs，这个Libraries文件夹放在哪都行，自己记住就可以，可以放在一会要创建的工程内也可以在工程外创建。下面是重要的操作了：&lt;br /&gt;
A.将GLFW的 D:\glfw-3.2.1\include下的GLFW目录拷贝到Includes文件夹下&lt;br /&gt;
B.将GLFW的 D:\glfw-3.2.1\build\src\Debug下的glfw3.lib文件拷贝到Libs文件夹下&lt;br /&gt;
C.将GL3W的 D:\gl3w-master\include下的GL目录拷贝到Includes文件夹下&lt;br /&gt;
D.将GL3W的 D:\gl3w-master\src下的gl3w.c文件拷贝到Libs文件夹下&lt;/p&gt;

&lt;p&gt;&amp;lt;2&amp;gt; vs2017中新建一个C++ 空项目&lt;br /&gt;
&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;3&amp;gt; 然后把源码里面的第一章的01-triangles.cpp代码拷贝到刚刚创建的空项目里；这个时候会报很多错误，这是因为代码中有一些引入的文件还没有操作，不要害怕，
A.把刚刚添加的Libs中的gl3w.c添加到项目的源文件中
B.把源代码中的LoadShaders.cpp文件添加到Libraries\Libs文件夹中，并且添加到项目的源文件中
C.把源代码include文件夹下的LoadShaders.h、vgl.h两个文件添加到Libraries\Includes&lt;/p&gt;

&lt;p&gt;&amp;lt;4&amp;gt;最后清理一下项目看看是不是就没错了，如果没有错误了就直接运行，见证奇迹的时刻到了，成功了！&lt;br /&gt;
&lt;img src=&quot;https://xiaopan1991.github.io/img/OpenGL/001/1_6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/22/OpenGLStudy001/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/22/OpenGLStudy001/</guid>
        
        <category>OpenGL 学习笔记</category>
        
        
      </item>
    
      <item>
        <title>Unity游戏开发---TimeLine</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;敬请期待…&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/26/UnityTimeline/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/26/UnityTimeline/</guid>
        
        <category>实用技能</category>
        
        
      </item>
    
      <item>
        <title>Unity游戏开发摘录</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;帧同步&quot;&gt;帧同步:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;帧同步常被RTS(即时战略)游戏常采用。在游戏中同步的是玩家的操作指令，操作指令包含当前的帧索引。一般的流程是客户端上传操作到服务器， 服务器收到后并不计算游戏行为， 而是转发到所有客户端。这里最重要的概念就是 相同的输入 + 相同的时机 = 相同的输出&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实现帧同步的流程一般是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.同步随机数种子。(一般游戏中都设计随机数的使用， 通过同步随机数种子，可以保持随机数一致性)&lt;br /&gt;
2.客户端上传操作指令。(指令包括游戏操作和当前帧索引)&lt;br /&gt;
3.服务器广播所有客户端的操作。(如果没有操作， 也要广播空指令来驱动游戏帧前进)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为帧同步的特性， 我们可以很方便的做出战斗回放：服务器记录所有操作， 客户端请求到操作文件再执行一次即可。&lt;/p&gt;

&lt;p&gt;帧同步的特性导致客户端的逻辑实现和表现实现必须完全分离。Unity中的一些方法接口(如 Invoke， Update、动画系统等)是不可靠的，所有要自己实现一套物理引擎、数学库，做到逻辑和表现分离。 这样即使Unity的渲染是不同步的，但是逻辑跑出来是同步的。&lt;/p&gt;

&lt;h2 id=&quot;状态同步&quot;&gt;状态同步:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;同步的是游戏中的各种状态。一般的流程是客户端上传操作到服务器，服务器收到后计算游戏行为的结果，然后以广播的方式下发游戏中各种状态，客户端收到状态后再根据状态显示内容。状态同步最广泛的应用应该是在回合制游戏中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;状态同步其实是一种不严谨的同步。它的思想中，不同玩家屏幕上的表现的一致性并不是重要指标， 只要每次操作的结果相同即可。所以状态同步对网络延迟的要求并不高。像玩RPG游戏，200-300ms的延迟也可以接受。 但是在RTS游戏中，50ms的延迟也会很受伤。 
举个移动的例子，在状态同步中， 客户端甲上操作要求从A点移动到B点，但在客户端乙上， 甲对象从A移动到C，然后从C点移动到了B。这是因为， 客户端乙收到A的移动状态时， 已经经过了一个延迟。这个过程中，需要客户端乙本地做一些平滑的处理，最终达到移动到B点的结果。&lt;/p&gt;

&lt;p&gt;所以国产RPG游戏中，动画的特效一般做的比较绚丽(大)， 攻击的时候给人感觉是击中了。放技能之前一般也有一个动画前摇，同时将攻击请求提交给服务器。等服务器结果返回时，动画也播放完毕了，之后就是统一的伤害效果和结算&lt;/p&gt;

&lt;p&gt;Ref:&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/qiaoquan3/article/details/75635466&quot;&gt;引用1&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/26/UnityArticle0206/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/26/UnityArticle0206/</guid>
        
        <category>摘录</category>
        
        
      </item>
    
      <item>
        <title>2018新目标</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“ KEEP IT UP. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;新的一年开始了，今天算是自己开年的第一个工作日吧，年前就已经架好的Blog也该好好的利用起来了…&lt;/p&gt;

&lt;h2 id=&quot;2018年目标&quot;&gt;2018年目标&lt;/h2&gt;
&lt;p&gt;生活目标:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;结束5年的北漂生活(走前去一次香山)&lt;/li&gt;
    &lt;li&gt;装修房子，布置自己的小家，开始真正意义上的生活&lt;/li&gt;
    &lt;li&gt;带老婆多出去走走&lt;/li&gt;
    &lt;li&gt;熟悉这个陌生的城市—-杭州&lt;/li&gt;
    &lt;li&gt;找一份满意的工作&lt;/li&gt;
    &lt;li&gt;颈椎康复训练&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;工作学习目标:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;学习更多的Unity开发技能&lt;/li&gt;
    &lt;li&gt;积累更多游戏开发工具的制作经验&lt;/li&gt;
    &lt;li&gt;掌握更多的游戏框架，阅读更多的游戏源码&lt;/li&gt;
    &lt;li&gt;对虚幻引擎进一步的学习，掌握引擎使用流程并能上手简单游戏&lt;/li&gt;
    &lt;li&gt;与时俱进，学习python&lt;/li&gt;
    &lt;li&gt;利用闲暇时间独立开发小游戏&lt;/li&gt;
    &lt;li&gt;写博客，与大家分享更多游戏开发中的坑与经验&lt;/li&gt;
    &lt;li&gt;结交更多圈内的朋友&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;2018年是陌生的一年，2018年是目标明确的一年，让我们背上行囊，一起踏上征程，让2018更精彩…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaopan1991.github.io/img/fight.jpg&quot; alt=&quot;我的头像&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/24/NewYearNewTarget/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/24/NewYearNewTarget/</guid>
        
        <category>旅程</category>
        
        
      </item>
    
      <item>
        <title>Hello 2018</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“// TODO IT. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#record#&lt;/p&gt;

&lt;p&gt;Xiao Pan的Blog之地。&lt;br /&gt;
2018年，从此开始了书写博客之旅。
分享一些生活感悟、技术经验…&lt;br /&gt;
敬请期待&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/29/hello-2018/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/29/hello-2018/</guid>
        
        <category>杂</category>
        
        
      </item>
    
  </channel>
</rss>
